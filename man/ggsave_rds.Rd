% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggsave_rds.R
\name{ggsave_rds}
\alias{ggsave_rds}
\title{Save `ggplot` objects as rds without enclosing environment}
\usage{
ggsave_rds(fun, filename, dir_save = NULL, return_plot = FALSE, ...)
}
\arguments{
\item{fun}{function. Function whose output is the `ggplot` object.}

\item{filename}{character. File name of output object. Note that, if it does not
end in \code{".rds"}, \code{".rds"} is appended.}

\item{dir_save}{character. Directory to save to.
Default is \code{NULL}, in which case the save directory is \code{here::here()}.}

\item{return_plot}{logical.
If \code{TRUE}, then the output of \code{fun} is returned.
Default is \code{FALSE}.}

\item{...}{name-value pairs (\code{alist}).
These are passed to code{fun} as parameter-argument pairs.}
}
\value{
If \code{return_plot == TRUE}, then the output from \code{fun}.
Otherwise \code{invisible(TRUE)}
}
\description{
\code{ggplot2::gplot} encloses the calling environment in
two places: the \code{mapping} and \code{plot_env} list elements.
When the plot is created in created within a descendent environment of the global environment,
it encloses a non-global environment and so all the variables in that environment are saved when
saving the object using \code{saveRDS}. This potentially leads to massive objects.
This function gets away from that by evaluating the plot-creation code in a new environment
containing only the necessary variables and whose direct parent is the global environment.
}
\examples{
plot_fn <- function() ggplot(data.frame(x = 1, y = 1), aes(x,y)) + geom_point()
ggsave_rds(plot_fn,
           'example.rds',
           return_plot = TRUE)
p <- readRDS('example.rds')
p
pryr::object_size(p)

}
